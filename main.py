import json
from datetime import datetime

from minichain import prompt, OpenAI
from tqdm import tqdm

from crawler import Crawler


@prompt(OpenAI(), template_file="parse.pmpt.tpl")
def parse_prompt(model, info):
  "Prompt to call GPT with a Jinja template"
  return model(dict(info=info))


@prompt(OpenAI(), template_file="classify.pmpt.tpl")
def classify_prompt(model, info):
  "Prompt to call GPT with a Jinja template"
  return model(dict(info=info))


if __name__ == "__main__":
  crawler = Crawler()
  outputs = crawler.return_admission_infos()
  final_outputs = []
  for output in tqdm(outputs):
    if len(output['GRE']) > 0:
      model = parse_prompt('\n'.join(output['GRE']))
      model = classify_prompt(model)
      gpt_result = model.run()
    else:
      gpt_result = None
    final_outputs.append({'school': output['school'],
                          'GRE': output.get('GRE', None),
                          'gpt_result': gpt_result,
                          'url': output['url']})

  # format json into markdown table format
  with open('output.md', 'w') as f:
    f.write(f"These results are generated in {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
    f.write(f"<h4><b>WARNING</b> - Results are generated by GPT, may contain hallucinations.</h4><br>")
    f.write("## Result from [Minichain](https://github.com/srush/MiniChain) (text-davinci-003)\n\n")
    f.write("| **School** | **URL** | **Is GRE Required?** |\n")
    for output in final_outputs:
      f.write(f"| {output['school']} | {output['url']} | { {output['gpt_result']}} |\n")

    f.write("\n\n## Raw Results from HTML Parser\n\n")
    # collapsible outputs
    for output in final_outputs:
      gre = '\n'.join(output.get('GRE'))
      f.write(f"\n<details><summary>{output['school']}</summary>\n")
      f.write(f"```{gre}```\n")
      f.write(f"</details>\n")

    f.write("## Want to Contribute?")
    f.write("Please submit a PR to [this repo]()")

  with open('output.json', 'w') as f:
    json.dump(final_outputs, f)
